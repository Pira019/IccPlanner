trigger:
- master
- preprod

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  ASPNETCORE_ENVIRONMENT: 'Preprod'

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '8.0.x'

# Installer l'outil EF Core globalement
- script: dotnet tool install --global dotnet-ef
  displayName: 'Install EF Core Tools'

# Restore
- script: dotnet restore IccPlanner/IccPlanner.csproj
  displayName: 'Restore NuGet packages'

# Build
- script: dotnet build IccPlanner/IccPlanner.csproj --configuration $(buildConfiguration)
  displayName: 'Build solution'


# Appliquer la migration EF Core
#- script: |
#    export PATH="$PATH:/root/.dotnet/tools"
#    dotnet ef database update --project Infrastructure/Infrastructure.csproj --startup-project IccPlanner/IccPlanner.csproj
#  displayName: 'Run EF Core migrations'
#  env:
#    ASPNETCORE_ENVIRONMENT: $(ASPNETCORE_ENVIRONMENT) 

# Publish
- script: dotnet publish  IccPlanner/IccPlanner.csproj --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/publish
  displayName: 'Publish project'

# Déploiement préprod
- task: AzureWebApp@1
  inputs:
    azureSubscription: 'ApiIccRessource'
    app-name: 'IccStartPlannrApiV01'
    package: '$(Build.ArtifactStagingDirectory)/publish'

# Déploiement prod
#- task: AzureWebApp@1
#  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
#  inputs:
#    azureSubscription: 'MaConnexionAzure'
#    appName: 'mon-api-prod'
#    package: '$(Build.ArtifactStagingDirectory)/publish'#
